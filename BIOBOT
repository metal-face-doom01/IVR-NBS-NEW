from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import psutil
import time
import os


TOKEN = "5623963060:AAHvmoOB-SkIEP0DQlu2MtFz2-U_q6CcyL4"
bot = Bot(token=TOKEN)
storage = MemoryStorage()
IVR = Dispatcher(bot, storage=storage)

start = '''
Привет.
Для начала работы с ботом напиши /help.
'''

description = '''
Список доступных команд:
/ram - покажет процент использованной оперативной памяти с заданным pid.
/cpu - покажет процент использованной операционной памяти с заданным pid.
/list + число - покажет n-список процессов.
/time - покажет время затраченное процессом с заданным pid.
'''


workinprogress = '''
Работа в процессе.
'''


def ram(pid):
    return psutil.Process(pid).memory_percent()


def cpu(pid):
    return psutil.Process(pid).cpu_percent()


@IVR.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply(start)


@IVR.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await bot.send_message(message.from_user.id, description)


@IVR.message_handler(commands=['list'])
async def process_list_command(message: types.Message):
    num = int(message.text.split()[-1])
    rst = ""
    for pid in psutil.pids()[:num]:
        rst += str(pid) + "\n"
    await bot.send_message(message.from_user.id, rst)


class Form(StatesGroup):
    ram = State()
    cpu = State()
    time = State()


@IVR.message_handler(commands=['ram'])
async def process_ram_num_command(message: types.Message):
    await Form.ram.set()
    await message.answer("Отправьте число")


@IVR.message_handler(state=Form.ram)
async def process_ram_command(message: types.Message, state: FSMContext):
    await state.finish()
    pid = int(message.text.split()[-1])
    if not pid in psutil.pids():
        await bot.send_message(
            message.from_user.id,
            "Нет процесса с заданным pid. "
        )
    else:
        await bot.send_message(message.from_user.id, str(ram(pid)) + "%")


@IVR.message_handler(commands=['cpu'])
async def process_ram_num_command(message: types.Message):
    await Form.cpu.set()
    await message.answer("Отправьте число")


@IVR.message_handler(state=Form.cpu)
async def process_ram_command(message: types.Message, state: FSMContext):
    await state.finish()
    pid = int(message.text.split()[-1])
    if not pid in psutil.pids():
        await bot.send_message(
            message.from_user.id,
            "Нет процесса с заданным pid. "
        )
    else:
        await bot.send_message(message.from_user.id, str(cpu(pid)) + "%")


@IVR.message_handler(commands=['time'])
async def process_ram_time_command(message: types.Message):
    await Form.time.set()
    await message.answer("Отправьте число")



@IVR.message_handler(state=Form.time)
async def process_ram_command(message: types.Message, state: FSMContext):
    await state.finish()
    p = psutil.Process(os.getpid())
    p.create_time()
    pid = int(message.text.split()[-1])
    if not pid in psutil.pids():
        await bot.send_message(
            message.from_user.id,
            "Нет процесса с заданным pid. "
        )
    else:
        await bot.send_message(message.from_user.id, str(time.time() - p.create_time()))


@IVR.message_handler()
async def echo_message(message: types.Message):
    await bot.send_message(message.from_user.id,
                           "Непонятная команда. Напиши /help."
                           )


if __name__ == '__main__':
    executor.start_polling(IVR, skip_updates=True)

